{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, delay, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction loginApi(data) {// axios.post('/api/user/login', data);\n}\n\nfunction logoutApi(data) {}\n\nfunction* logout(action) {\n  try {\n    put({\n      type: 'LOG_OUT_SUCCESS',\n      data: action.data\n    });\n  } catch (e) {\n    put({\n      type: 'LOG_OUT_FAILURE',\n      data: e.response.data\n    });\n  }\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(logInApi, action.data);\n    delay(1000);\n    console.log('실행');\n    put({\n      type: 'LOG_IN_FAILURE',\n      data: _objectSpread(_objectSpread({}, action.data), {}, {\n        nickname: 'james'\n      })\n    });\n  } catch (e) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: e.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest('LOG_IN_REQUEST', login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest('LOG_OUT_REQUEST', logout);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout)]);\n}","map":{"version":3,"sources":["/Users/mark/WebstormProjects/nodebird_inf/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","call","axios","loginApi","data","logoutApi","logout","action","type","e","response","login","console","log","nickname","watchLogin","watchLogout","userSaga"],"mappings":";;;;;;AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB,CACtB;AACD;;AAED,SAASC,SAAT,CAAmBD,IAAnB,EAAyB,CAAE;;AAE3B,UAAUE,MAAV,CAAiBC,MAAjB,EAAyB;AACvB,MAAI;AACFR,IAAAA,GAAG,CAAC;AACFS,MAAAA,IAAI,EAAE,iBADJ;AAEFJ,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFX,KAAD,CAAH;AAID,GALD,CAKE,OAAOK,CAAP,EAAU;AACVV,IAAAA,GAAG,CAAC;AACFS,MAAAA,IAAI,EAAE,iBADJ;AAEFJ,MAAAA,IAAI,EAAEK,CAAC,CAACC,QAAF,CAAWN;AAFf,KAAD,CAAH;AAID;AACF;;AAED,UAAUO,KAAV,CAAgBJ,MAAhB,EAAwB;AACtB,MAAI;AACF;AACAV,IAAAA,KAAK,CAAC,IAAD,CAAL;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAd,IAAAA,GAAG,CAAC;AACFS,MAAAA,IAAI,EAAE,gBADJ;AAEFJ,MAAAA,IAAI,kCAAOG,MAAM,CAACH,IAAd;AAAoBU,QAAAA,QAAQ,EAAE;AAA9B;AAFF,KAAD,CAAH;AAID,GARD,CAQE,OAAOL,CAAP,EAAU;AACV,UAAMV,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE,gBADE;AAERJ,MAAAA,IAAI,EAAEK,CAAC,CAACC,QAAF,CAAWN;AAFT,KAAD,CAAT;AAID;AACF;;AAED,UAAUW,UAAV,GAAuB;AACrB,QAAMf,UAAU,CAAC,gBAAD,EAAmBW,KAAnB,CAAhB;AACD;;AAED,UAAUK,WAAV,GAAwB;AACtB,QAAMhB,UAAU,CAAC,iBAAD,EAAoBM,MAApB,CAAhB;AACD;;AAED,eAAe,UAAUW,QAAV,GAAqB;AAClC,QAAMrB,GAAG,CAAC,CAACE,IAAI,CAACiB,UAAD,CAAL,EAAmBjB,IAAI,CAACkB,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import { all, delay, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction loginApi(data) {\n  // axios.post('/api/user/login', data);\n}\n\nfunction logoutApi(data) {}\n\nfunction* logout(action) {\n  try {\n    put({\n      type: 'LOG_OUT_SUCCESS',\n      data: action.data,\n    });\n  } catch (e) {\n    put({\n      type: 'LOG_OUT_FAILURE',\n      data: e.response.data,\n    });\n  }\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(logInApi, action.data);\n    delay(1000);\n    console.log('실행');\n    put({\n      type: 'LOG_IN_FAILURE',\n      data: { ...action.data, nickname: 'james' },\n    });\n  } catch (e) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: e.response.data,\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest('LOG_IN_REQUEST', login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest('LOG_OUT_REQUEST', logout);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout)]);\n}\n"]},"metadata":{},"sourceType":"module"}