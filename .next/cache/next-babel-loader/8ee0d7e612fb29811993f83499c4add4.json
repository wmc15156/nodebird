{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, delay, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\n\nfunction loginApi(data) {// axios.post('/api/user/login', data);\n}\n\nfunction logoutApi(data) {}\n\nfunction* logout(action) {\n  try {\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(logInApi, action.data);\n    delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: _objectSpread(_objectSpread({}, action.data), {}, {\n        nickname: 'james'\n      })\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction signUpApi(data) {}\n\nfunction* signUp(action) {\n  try {\n    // const result = yield call(signUpApi, action.data);\n    yield delay(1000);\n    put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    put({\n      type: SIGN_UP_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout)]);\n}","map":{"version":3,"sources":["/Users/mark/WebstormProjects/nodebird_inf/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","call","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","loginApi","data","logoutApi","logout","action","type","e","error","response","login","nickname","signUpApi","signUp","watchLogin","watchLogout","watchSignUp","userSaga"],"mappings":";;;;;;AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,QAUO,kBAVP;;AAYA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB,CACtB;AACD;;AAED,SAASC,SAAT,CAAmBD,IAAnB,EAAyB,CAAE;;AAE3B,UAAUE,MAAV,CAAiBC,MAAjB,EAAyB;AACvB,MAAI;AACF,UAAMjB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAET,eADE;AAERK,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GALD,CAKE,OAAOK,CAAP,EAAU;AACV,UAAMnB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEX,eADE;AAERa,MAAAA,KAAK,EAAED,CAAC,CAACE,QAAF,CAAWP;AAFV,KAAD,CAAT;AAID;AACF;;AAED,UAAUQ,KAAV,CAAgBL,MAAhB,EAAwB;AACtB,MAAI;AACF;AACAnB,IAAAA,KAAK,CAAC,IAAD,CAAL;AACA,UAAME,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEZ,cADE;AAERQ,MAAAA,IAAI,kCAAOG,MAAM,CAACH,IAAd;AAAoBS,QAAAA,QAAQ,EAAE;AAA9B;AAFI,KAAD,CAAT;AAID,GAPD,CAOE,OAAOJ,CAAP,EAAU;AACV,UAAMnB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEd,cADE;AAERgB,MAAAA,KAAK,EAAED,CAAC,CAACE,QAAF,CAAWP;AAFV,KAAD,CAAT;AAID;AACF;;AAED,SAASU,SAAT,CAAmBV,IAAnB,EAAyB,CAAE;;AAE3B,UAAUW,MAAV,CAAiBR,MAAjB,EAAyB;AACvB,MAAI;AACF;AACA,UAAMnB,KAAK,CAAC,IAAD,CAAX;AACAE,IAAAA,GAAG,CAAC;AACFkB,MAAAA,IAAI,EAAEN;AADJ,KAAD,CAAH;AAGD,GAND,CAME,OAAOO,CAAP,EAAU;AACVnB,IAAAA,GAAG,CAAC;AACFkB,MAAAA,IAAI,EAAER,eADJ;AAEFU,MAAAA,KAAK,EAAED,CAAC,CAACE,QAAF,CAAWP;AAFhB,KAAD,CAAH;AAID;AACF;;AAED,UAAUY,UAAV,GAAuB;AACrB,QAAMzB,UAAU,CAACI,cAAD,EAAiBiB,KAAjB,CAAhB;AACD;;AAED,UAAUK,WAAV,GAAwB;AACtB,QAAM1B,UAAU,CAACO,eAAD,EAAkBQ,MAAlB,CAAhB;AACD;;AAED,UAAUY,WAAV,GAAwB;AACtB,QAAM3B,UAAU,CAACU,eAAD,EAAkBc,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMhC,GAAG,CAAC,CAACE,IAAI,CAAC2B,UAAD,CAAL,EAAmB3B,IAAI,CAAC4B,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import { all, delay, fork, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  LOG_IN_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_OUT_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  SIGN_UP_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n} from '../reducers/user';\n\nfunction loginApi(data) {\n  // axios.post('/api/user/login', data);\n}\n\nfunction logoutApi(data) {}\n\nfunction* logout(action) {\n  try {\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      data: action.data,\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e.response.data,\n    });\n  }\n}\n\nfunction* login(action) {\n  try {\n    // const result = yield call(logInApi, action.data);\n    delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: { ...action.data, nickname: 'james' },\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e.response.data,\n    });\n  }\n}\n\nfunction signUpApi(data) {}\n\nfunction* signUp(action) {\n  try {\n    // const result = yield call(signUpApi, action.data);\n    yield delay(1000);\n    put({\n      type: SIGN_UP_SUCCESS,\n    });\n  } catch (e) {\n    put({\n      type: SIGN_UP_FAILURE,\n      error: e.response.data,\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout)]);\n}\n"]},"metadata":{},"sourceType":"module"}