{"ast":null,"code":"import { all, takeLatest, delay, call, put, fork } from 'redux-saga/effects';\nimport shortId from 'shortid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\n\nfunction addPostApi(data) {}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostApi, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: e.response.data\n    });\n  }\n}\n\nfunction addCommentApi(data) {}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentApi, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postRootSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/mark/WebstormProjects/nodebird_inf/sagas/post.js"],"names":["all","takeLatest","delay","call","put","fork","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","addPostApi","data","addPost","action","id","generate","type","content","e","response","addCommentApi","addComment","error","watchAddPost","watchAddComment","postRootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,KAA1B,EAAiCC,IAAjC,EAAuCC,GAAvC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,gBANF,QAOO,kBAPP;AAQA,SAAQC,cAAR,QAA6B,kBAA7B;;AAIA,SAASC,UAAT,CAAoBC,IAApB,EAA0B,CAAE;;AAE5B,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMgB,EAAE,GAAGZ,OAAO,CAACa,QAAR,EAAX;AACA,UAAMf,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAER,gBADE;AAERG,MAAAA,IAAI,EAAE;AACJG,QAAAA,EADI;AAEJG,QAAAA,OAAO,EAAEJ,MAAM,CAACF;AAFZ;AAFE,KAAD,CAAT;AAOA,UAAMX,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEP,cADE;AAERE,MAAAA,IAAI,EAAEG;AAFE,KAAD,CAAT;AAID,GAfD,CAeE,OAAOI,CAAP,EAAU;AACV,UAAMlB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEV,gBADE;AAERK,MAAAA,IAAI,EAAEO,CAAC,CAACC,QAAF,CAAWR;AAFT,KAAD,CAAT;AAID;AACF;;AAED,SAASS,aAAT,CAAuBT,IAAvB,EAA6B,CAAE;;AAE/B,UAAUU,UAAV,CAAqBR,MAArB,EAA6B;AAC3B,MAAI;AACF;AACA,UAAMb,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEX,mBADE;AAERM,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOO,CAAP,EAAU;AACV,UAAMlB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEb,mBADE;AAERmB,MAAAA,KAAK,EAAEJ,CAAC,CAACC,QAAF,CAAWR;AAFV,KAAD,CAAT;AAID;AACF;;AAED,UAAUY,YAAV,GAAyB;AACvB,QAAM1B,UAAU,CAACU,gBAAD,EAAmBK,OAAnB,CAAhB;AACD;;AAED,UAAUY,eAAV,GAA4B;AAC1B,QAAM3B,UAAU,CAACO,mBAAD,EAAsBiB,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUI,YAAV,GAAyB;AACtC,QAAM7B,GAAG,CAAC,CAACK,IAAI,CAACsB,YAAD,CAAL,EAAqBtB,IAAI,CAACuB,eAAD,CAAzB,CAAD,CAAT;AACD","sourcesContent":["import { all, takeLatest, delay, call, put, fork } from 'redux-saga/effects';\nimport shortId from 'shortid';\n\nimport {\n  ADD_COMMENT_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n} from '../reducers/post';\nimport {ADD_POST_TO_ME} from \"../reducers/user\";\n\n\n\nfunction addPostApi(data) {}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostApi, action.data);\n    yield delay(1000);\n    const id = shortId.generate()\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    })\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: e.response.data,\n    });\n  }\n}\n\nfunction addCommentApi(data) {}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentApi, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e.response.data,\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postRootSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}\n"]},"metadata":{},"sourceType":"module"}